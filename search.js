window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "res_reg_lmnt_awikner", "modulename": "res_reg_lmnt_awikner", "type": "module", "doc": "<h1 id=\"installation\">Installation</h1>\n\n<p>Begin by creating a virtual environment with Python 3.9, preferably using Conda.</p>\n\n<pre><code>conda create --name res39 python=3.9\n</code></pre>\n\n<p>Then, activate this environment and install the package from TestPyPI.</p>\n\n<pre><code>pip install --extra-index-url https://test.pypi.org/simple/ res-reg-lmnt-awikner\n</code></pre>\n\n<p>Test scripts to recreate results found in the paper can be found in <a href=\"https://github.com/awikner/res-noise-stabilization/tree/master/res_test_drivers\">res_test_drivers</a>.</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes", "modulename": "res_reg_lmnt_awikner.classes", "type": "module", "doc": "<p></p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts", "type": "class", "doc": "<p>This class contains the various parameters and options that will be used during the time series data generation,\nreservoir generation, training, testing, and output.</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.__init__", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.__init__", "type": "function", "doc": "<p>Initializes the RunOpts class.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If an input instance variable has an unaccepted value.</li>\n<li><strong>TypeError:</strong>  If an input instance variable has an incorrect type.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">argv</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">runflag</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">train_time</span><span class=\"o\">=</span><span class=\"mi\">20000</span>,</span><span class=\"param\">\t<span class=\"n\">test_time</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sync_time</span><span class=\"o\">=</span><span class=\"mi\">2000</span>,</span><span class=\"param\">\t<span class=\"n\">discard_time</span><span class=\"o\">=</span><span class=\"mi\">500</span>,</span><span class=\"param\">\t<span class=\"n\">res_size</span><span class=\"o\">=</span><span class=\"mi\">500</span>,</span><span class=\"param\">\t<span class=\"n\">res_per_test</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">noise_realizations</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">num_tests</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">num_trains</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">traintype</span><span class=\"o\">=</span><span class=\"s1\">&#39;normal&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">noisetype</span><span class=\"o\">=</span><span class=\"s1\">&#39;gaussian&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">system</span><span class=\"o\">=</span><span class=\"s1\">&#39;KS&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">savepred</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">save_time_rms</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">squarenodes</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">rho</span><span class=\"o\">=</span><span class=\"mf\">0.6</span>,</span><span class=\"param\">\t<span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">theta</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">leakage</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">bias_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;new_random&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">win_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;full_0centered&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">debug_mode</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">pmap</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">machine</span><span class=\"o\">=</span><span class=\"s1\">&#39;deepthought2&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ifray</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">tau</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">num_cpus</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">metric</span><span class=\"o\">=</span><span class=\"s1\">&#39;mean_rms&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">return_all</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">save_eigenvals</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">max_valid_time</span><span class=\"o\">=</span><span class=\"mi\">2000</span>,</span><span class=\"param\">\t<span class=\"n\">noise_values_array</span><span class=\"o\">=</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">1.00000000e-04</span><span class=\"p\">,</span> <span class=\"mf\">3.16227766e-01</span><span class=\"p\">,</span> <span class=\"mf\">1.00000000e+03</span><span class=\"p\">])</span>,</span><span class=\"param\">\t<span class=\"n\">reg_values</span><span class=\"o\">=</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">0.00000000e+00</span><span class=\"p\">,</span> <span class=\"mf\">1.00000000e-11</span><span class=\"p\">,</span> <span class=\"mf\">3.16227766e-11</span><span class=\"p\">,</span> <span class=\"mf\">1.00000000e-10</span><span class=\"p\">,</span>\n       <span class=\"mf\">3.16227766e-10</span><span class=\"p\">,</span> <span class=\"mf\">1.00000000e-09</span><span class=\"p\">])</span>,</span><span class=\"param\">\t<span class=\"n\">res_start</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">train_start</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">test_start</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">reg_train_times</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">root_folder</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">prior</span><span class=\"o\">=</span><span class=\"s1\">&#39;zero&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">save_truth</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.argv", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.argv", "type": "variable", "doc": "<p>Command line input for generating a RunOpts object. If left as None, then the object will be generated using\nthe other inputs or defaults. If multiple instances of the same variable are given, the class will default\nto the command line input. See RunOpts.get_run_opts for more information. Default: None</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.system", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.system", "type": "variable", "doc": "<p>String denoting which dynamical system we are obtaining time series data from. Options: 'lorenz' for the \nLorenz 63 equations, 'KS' for the Kuramoto-Sivashinsky equation with 64 grid points and a periodicity length of\n22, and KS_d2175 for the Kuramoto-Sivashinksy equation with 64 grid points and a periodicity length of 21.75.\nDefault: 'KS'</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.tau", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.tau", "type": "variable", "doc": "<p>Time between each data point in the time series data. If system = 'lorenz', this value must be evenly divided\nby 0.01 (the integration time step). If left as None, then the class will set tau to the default value for the\nparticular dynamical system. Default: None</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.train_time", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.train_time", "type": "variable", "doc": "<p>Number of training data points. Default: 20000</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.test_time", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.test_time", "type": "variable", "doc": "<p>Number of testing data points. If left as None, then the class will default to 4000 if system = 'lorenz', or \n16000 if system = 'KS' or 'KS_d2175'. Default: None</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.sync_time", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.sync_time", "type": "variable", "doc": "<p>Number of data points used to synchronize the reservoir to each test data set. Default: 2000</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.discard_time", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.discard_time", "type": "variable", "doc": "<p>Number of data points used to synchronize the reservoir to each training data set. Default: 500</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.res_size", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.res_size", "type": "variable", "doc": "<p>Number of nodes in the reservoir. Default: 500</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.rho", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.rho", "type": "variable", "doc": "<p>Reservoir spectral radius. Default: 0.6</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.sigma", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.sigma", "type": "variable", "doc": "<p>Reservoir input scaling. Default: 0.1</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.theta", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.theta", "type": "variable", "doc": "<p>Reservoir input bias scaling. Default: 0.1</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.leakage", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.leakage", "type": "variable", "doc": "<p>Reservoir leaking rate. Default: 1.0</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.squarenodes", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.squarenodes", "type": "variable", "doc": "<p>Boolean denoting whether or not the squared node states are including in the reservoir feature vector.\nDefault: True</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.bias_type", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.bias_type", "type": "variable", "doc": "<p>Type of reservoir input bias to be used. See the Reservoir class for available options. \nDefault: new_random</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.win_type", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.win_type", "type": "variable", "doc": "<p>Type of input coupling matrix to be used. See the Reservoir class for available options. \nDefault: full_0centered</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.traintype", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.traintype", "type": "variable", "doc": "<p>Type of training to be used to determine the reservoir output coupling matrix. There are a number of options\navailable, but those used in the paper are:</p>\n\n<p>'normal' - Standard reservoir training, potentially with input noise added.</p>\n\n<p>'gradientk%d' % (Number of noise steps) - Reservoir training with no noise and LMNT regularization for a number of \nnoise steps &gt; 1, or Jacobian regularization for a number of noise steps = 1.</p>\n\n<p>'regzerok%d' % (Number of noise steps) - Reservoir training with no noise and LMNT/Jacobian regularization computed\nusing a zero-input and zero reservoir state.</p>\n\n<p>Default: 'normal'</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.noisetype", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.noisetype", "type": "variable", "doc": "<p>Type of noise to be added to the reservoir input during training. Options are 'none' and 'gaussian'.\nDefault: 'none'</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.noise_values_array", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.noise_values_array", "type": "variable", "doc": "<p>Numpy array containing the variance of the added input noise (if noisetype = 'gaussian') or the LMNT/Jacobian\nregularization parameter value (if traintype = 'gradientk%d' or 'regzerok%d'). Each value contained in the array\nwill be tested separately using each of the reservoirs, training, and testing data sets.\nDefault: np.logspace(-4, 3, num=3, base=10)</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.reg_train_times", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.reg_train_times", "type": "variable", "doc": "<p>Numpy array containing the number of training data points to be used to train the LMNT or Jacobian \nregularization. If left as None, then the class will default to an array containing only\nthe total number of training data points for standard LMNT/Jacobian or the number of noise steps \nif using zero-input LMNT. Default: None</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.noise_realizations", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.noise_realizations", "type": "variable", "doc": "<p>Number of input noise realizations used to train the reservoir (if training with noise). If not training with\nnoise, set to 1. Default: 1</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.reg_values", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.reg_values", "type": "variable", "doc": "<p>Numpy array containing the Tikhonov regularization parameter values. Each value contained in the array\nwill be tested separately using each of the reservoirs, training, and testing data sets.\nDefault: np.append(0., np.logspace(-11, -9, 5))</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.prior", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.prior", "type": "variable", "doc": "<p>Prior to be used when computing the output coupling matrix using Tikhonov regularization. Options are:</p>\n\n<p>'zero' - Standard Tikhonov regularization with a zero prior.</p>\n\n<p>'input_pass' - Tikhonov regularization with a persistence prior (i.e., set the input pass-through weights to 1).</p>\n\n<p>Default: 'zero'</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.max_valid_time", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.max_valid_time", "type": "variable", "doc": "<p>Maximum valid time for each valid time test during the testing period. This should be set so that\ntest_time / max_valid_time is a whole number greater than 0. Default: 2000</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.res_per_test", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.res_per_test", "type": "variable", "doc": "<p>Number of random reservoir realizations to test. Default: 1</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.num_trains", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.num_trains", "type": "variable", "doc": "<p>Number of independently generated training data sets to test with. Default: 1</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.num_tests", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.num_tests", "type": "variable", "doc": "<p>Number of independently generated testing data sets to test with. Default: 1</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.res_start", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.res_start", "type": "variable", "doc": "<p>Starting iterate for generating the random seeds that are used to generate the reservoir. Default: 0</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.train_start", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.train_start", "type": "variable", "doc": "<p>Starting iterate for generating the random seeds that are used to generate the training data sets.\nDefault: 0</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.test_start", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.test_start", "type": "variable", "doc": "<p>Starting iterate for generating the random seeds that are used to generate the testing data sets.\nDefault: 0</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.root_folder", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.root_folder", "type": "variable", "doc": "<p>Location where output data will be stored in the Data folder. If None, then defaults to the current working \ndirectory. Default: None</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.return_all", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.return_all", "type": "variable", "doc": "<p>Boolean for determining of all results should be returned, or only the results with the obtained using the\n\"best\" Tikhonov regularization parameter value based on the selected metric. Default: True</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.metric", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.metric", "type": "variable", "doc": "<p>Metric for determining the \"best\" results. Not used if return_all = True. Options include 'mean_rms', 'max_rms',\nand 'stable_frac'. Caution: Some options may be deprecated. Default: 'mss-var'</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.savepred", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.savepred", "type": "variable", "doc": "<p>Boolean for determining if reservoir prediction time series should be saved. Default: False</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.save_time_rms", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.save_time_rms", "type": "variable", "doc": "<p>Boolean for determining if reservoir prediction RMS error should be saved. Default: False</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.pmap", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.pmap", "type": "variable", "doc": "<p>Boolean for determining if reservoir prediction Poincare maximum map should be saved. Default: False</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.save_eigenvals", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.save_eigenvals", "type": "variable", "doc": "<p>Boolean for determining if the eigenvalues of the LMNT/Jacobian regularization matrices should be saved.\nDefault: False</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.save_truth", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.save_truth", "type": "variable", "doc": "<p>Boolean for determining if the true testing data should be saved. Default: False</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.ifray", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.ifray", "type": "variable", "doc": "<p>Boolean for determining if ray should be used to compute results for multiple reservoirs and training \ndata sets. Default: False</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.num_cpus", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.num_cpus", "type": "variable", "doc": "<p>If using ray for paralellization, this sets the number of cpus to be used. Default: 1</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.machine", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.machine", "type": "variable", "doc": "<p>Machine which results are computed on. Leave as personal unless you are connecting to a ray cluster \nelsewhere. Default: 'personal'</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.runflag", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.runflag", "type": "variable", "doc": "<p>True indicates that we are about to compute results, and the appropriate directories should be created.\nOtherwise, we do not create additional directories. Default: True</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.debug_mode", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.debug_mode", "type": "variable", "doc": "<p>Boolean for determining if errors during reservoir training which could arise from non-convergence of the \neigenvalue solver should be suppressed. If left as False, will suppress errors im much of the core code,\nso this should be set to True if making changes. Default: False</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.get_file_name", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.get_file_name", "type": "function", "doc": "<p>Creates the folder and final data file name for the tests about to be run.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>self:</strong>  RunOpts object.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>RunOpts object with initialized folder and file name variables. Also creates the aforementioned folder\n  if not already created.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.classes.RunOpts.get_run_opts", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "RunOpts.get_run_opts", "type": "function", "doc": "<p>Processes the command line input into instance variables.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>self:</strong>  RunOpts object.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>RunOpts object with instance variables set from command line input.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>GetoptError:</strong>  Raises an error of command line arguments no recognized.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.classes.Reservoir", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "Reservoir", "type": "class", "doc": "<p>Class for initializing and storing the reservoir matrices and internal states.</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.Reservoir.__init__", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "Reservoir.__init__", "type": "function", "doc": "<p>Initializes the Reservoir object.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>run_opts:</strong>  RunOpts object containing parameters used to generate the reservoir.</li>\n<li><strong>res_gen:</strong>  A numpy.random.Generator object used to generate the random matrices in the Reservoir.</li>\n<li><strong>res_itr:</strong>  Reservoir iteration tag.</li>\n<li><strong>input_size:</strong>  Number of elements in reservoir input.</li>\n<li><strong>avg_degree:</strong>  Average in-degree of each reservoir node (i.e., the average number of edges that connect into each vertex in the graph). Default: 3</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Constructed Reservoir object.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If win_type or bias_type is not recognized.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">run_opts</span>, </span><span class=\"param\"><span class=\"n\">res_gen</span>, </span><span class=\"param\"><span class=\"n\">res_itr</span>, </span><span class=\"param\"><span class=\"n\">input_size</span>, </span><span class=\"param\"><span class=\"n\">avg_degree</span><span class=\"o\">=</span><span class=\"mi\">3</span></span>)</span>"}, {"fullname": "res_reg_lmnt_awikner.classes.ResOutput", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "ResOutput", "type": "class", "doc": "<p>Class for holding the output from a reservoir computer test. Is typically used to save the output from one of\nthe (potentially parallel) runs.</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.ResOutput.__init__", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "ResOutput.__init__", "type": "function", "doc": "<p>Creates the ResOutput object.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>self:</strong>  ResOutput object</li>\n<li><strong>run_opts:</strong>  RunOpts object for the test.</li>\n<li><strong>noise_array:</strong>  Array of noise/Jacobian/LMNT regularization parameter values used in this test.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>self: initialized ResOutput object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">run_opts</span>, </span><span class=\"param\"><span class=\"n\">noise_array</span></span>)</span>"}, {"fullname": "res_reg_lmnt_awikner.classes.ResOutput.save", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "ResOutput.save", "type": "function", "doc": "<p>Saves the data in the ResOutput object to a series of .csv files.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>self:</strong>  ResOutput object</li>\n<li><strong>run_opts:</strong>  RunOpts object for test.</li>\n<li><strong>noise_array:</strong>  Array of noise/Jacobian/LMNT regularization parameter values used in this test.</li>\n<li><strong>res_itr:</strong>  Index for the reservoir iteration used.</li>\n<li><strong>train_seed:</strong>  Index for the training data iteration used.</li>\n<li><strong>test_idxs:</strong>  Indices for the testing data iterations used.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Saves .csv files.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">run_opts</span>, </span><span class=\"param\"><span class=\"n\">noise_array</span>, </span><span class=\"param\"><span class=\"n\">res_itr</span>, </span><span class=\"param\"><span class=\"n\">train_seed</span>, </span><span class=\"param\"><span class=\"n\">test_idxs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.classes.NumericalModel", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "NumericalModel", "type": "class", "doc": "<p>Class for generating training or testing data using one of the test numerical models.</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.NumericalModel.__init__", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "NumericalModel.__init__", "type": "function", "doc": "<p>Creates the NumericalModel object.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>self:</strong>  NumericalModel object.</li>\n<li><strong>tau:</strong>  Time step between measurements of the system dynamics.</li>\n<li><strong>int_step:</strong>  the number of numerical integration steps between each measurement.</li>\n<li><strong>T:</strong>  Total number of measurements.</li>\n<li><strong>ttsplit:</strong>  Number of measurements to be used in the training data set.</li>\n<li><strong>u0:</strong>  Initial condition for integration.</li>\n<li><strong>system:</strong>  Name of system to generate data from. Options: 'lorenz', 'KS','KS_d2175'</li>\n<li><strong>params:</strong>  Internal parameters for model integration. Currently only used by KS options.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Complete NumericalModel object with precomputed internal parameters.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">tau</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">int_step</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">T</span><span class=\"o\">=</span><span class=\"mi\">300</span>,</span><span class=\"param\">\t<span class=\"n\">ttsplit</span><span class=\"o\">=</span><span class=\"mi\">5000</span>,</span><span class=\"param\">\t<span class=\"n\">u0</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">system</span><span class=\"o\">=</span><span class=\"s1\">&#39;lorenz&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"o\">=</span><span class=\"n\">array</span><span class=\"p\">([],</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">complex128</span><span class=\"p\">)</span></span>)</span>"}, {"fullname": "res_reg_lmnt_awikner.classes.ResPreds", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "ResPreds", "type": "class", "doc": "<p>Class for loading and storing prediction time series data generated from reservoir computer tests.</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.ResPreds.__init__", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "ResPreds.__init__", "type": "function", "doc": "<p>Loads the prediction data from .csv files.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>run_opts:</strong>  RunOpts object containing the run parameters.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">run_opts</span></span>)</span>"}, {"fullname": "res_reg_lmnt_awikner.classes.ResPmap", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "ResPmap", "type": "class", "doc": "<p>Class for loading and storing Poincare maximum map data from reservoir predictions\ngenerated from reservoir computer tests.</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.ResPmap.__init__", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "ResPmap.__init__", "type": "function", "doc": "<p>Loads the Poincare maxmimum map data from .csv files.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>run_opts:</strong>  RunOpts object containing the run parameters.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">run_opts</span></span>)</span>"}, {"fullname": "res_reg_lmnt_awikner.classes.ResData", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "ResData", "type": "class", "doc": "<p>Class for loading and storing prediction analysis data generated from reservoir computer tests.</p>\n"}, {"fullname": "res_reg_lmnt_awikner.classes.ResData.__init__", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "ResData.__init__", "type": "function", "doc": "<p>Loads the prediction analysis data from a compressed pandas data file.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>run_opts:</strong>  RunOpts object containing the run parameters.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">run_opts</span></span>)</span>"}, {"fullname": "res_reg_lmnt_awikner.classes.ResData.shape", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "ResData.shape", "type": "function", "doc": "<p>Returns the shape of the pandas data frame</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.classes.ResData.size", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "ResData.size", "type": "function", "doc": "<p>Returns the size of the pandas data frame</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.classes.ResData.data_slice", "modulename": "res_reg_lmnt_awikner.classes", "qualname": "ResData.data_slice", "type": "function", "doc": "<p>Slices and/or finds the best results using a metric computed by the reduce_fun.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>self:</strong>  ResPreds object</li>\n<li><strong>res:</strong>  Indices for reservoir results to be returned/optimized over. If left as an empty array, uses all indices.</li>\n<li><strong>train:</strong>  Indices for training data set results to be returned/optimized over. If left as an empty array, uses all indices.</li>\n<li><strong>test:</strong>  Indices for testing data set results to be returned/optimized over. If left as an empty array, uses all indices.</li>\n<li><strong>reg_train:</strong>  Number of training data points for regularization to be returned/optimized over. If left as an empty array, uses all values.</li>\n<li><strong>noise:</strong>  Noise/Jacobian/LMNT regularization parameter value results to be returned/optimized over. If left as an empty array, uses all values.</li>\n<li><strong>reg:</strong>  Tikhonov regularization paramter value results to be returned/optimized over. If left as an empty array, uses all values.</li>\n<li><strong>median_flag:</strong>  Boolean indicating whether the data should be optimized.</li>\n<li><strong>reduce_axes:</strong>  List containing the axes to be optimized over. Elements can be 'res', 'train', 'test', 'reg_train', 'noise', or 'reg'.</li>\n<li><strong>metric:</strong>  Metric to be used to compute which parameters give the best result. Options are:\n'gross_frac': Lowest fraction of gross error\n'mean_rms': Lowest mean map error.\n'max_rms: Lowest maximum map error.\n'valid_time': Highest valid prediction time.'</li>\n<li><strong>gross_frac_metrix:</strong>  If using 'gross_frac' as a metric, this is the secondary metric that will be used if multiple parameters give equally good prediction results.</li>\n<li><strong>gross_err_bnd:</strong>  The cutoff in the mean map error above which predictions are considered to have gross error.</li>\n<li><strong>reduce_fun:</strong>  Function for computing the overall performance for a given set of parameters over many tests.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Pandas DataFrame containing the sliced and optimized prediction results.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If any of the inputs are not recognized/incompatible.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">res</span><span class=\"o\">=</span><span class=\"n\">array</span><span class=\"p\">([],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">float64</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">train</span><span class=\"o\">=</span><span class=\"n\">array</span><span class=\"p\">([],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">float64</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">test</span><span class=\"o\">=</span><span class=\"n\">array</span><span class=\"p\">([],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">float64</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">reg_train</span><span class=\"o\">=</span><span class=\"n\">array</span><span class=\"p\">([],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">float64</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">noise</span><span class=\"o\">=</span><span class=\"n\">array</span><span class=\"p\">([],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">float64</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">reg</span><span class=\"o\">=</span><span class=\"n\">array</span><span class=\"p\">([],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">float64</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">median_flag</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">reduce_axes</span><span class=\"o\">=</span><span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">metric</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">gross_frac_metric</span><span class=\"o\">=</span><span class=\"s1\">&#39;valid_time&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">gross_err_bnd</span><span class=\"o\">=</span><span class=\"mf\">100.0</span>,</span><span class=\"param\">\t<span class=\"n\">reduce_fun</span><span class=\"o\">=&lt;</span><span class=\"n\">function</span> <span class=\"n\">NDFrame</span><span class=\"o\">.</span><span class=\"n\">_add_numeric_operations</span><span class=\"o\">.&lt;</span><span class=\"nb\">locals</span><span class=\"o\">&gt;.</span><span class=\"n\">median</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.csc_mult", "modulename": "res_reg_lmnt_awikner.csc_mult", "type": "module", "doc": "<p></p>\n"}, {"fullname": "res_reg_lmnt_awikner.csc_mult.matrix_dot_left_T", "modulename": "res_reg_lmnt_awikner.csc_mult", "qualname": "matrix_dot_left_T", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">indices</span>, </span><span class=\"param\"><span class=\"n\">indptr</span>, </span><span class=\"param\"><span class=\"n\">shape</span>, </span><span class=\"param\"><span class=\"n\">mat</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.csc_mult.matrix_diag_mult", "modulename": "res_reg_lmnt_awikner.csc_mult", "qualname": "matrix_diag_mult", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dmat</span>, </span><span class=\"param\"><span class=\"n\">b</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.csc_mult.matrix_sparse_mult", "modulename": "res_reg_lmnt_awikner.csc_mult", "qualname": "matrix_sparse_mult", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sp</span>, </span><span class=\"param\"><span class=\"n\">mat</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.csc_mult.matrix_diag_sparse_mult_add", "modulename": "res_reg_lmnt_awikner.csc_mult", "qualname": "matrix_diag_sparse_mult_add", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">diag_mat</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">indices</span>, </span><span class=\"param\"><span class=\"n\">indptr</span>, </span><span class=\"param\"><span class=\"n\">shape</span>, </span><span class=\"param\"><span class=\"n\">add_mat</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.csc_mult.matrix_diag_sparse_mult_add_sparse", "modulename": "res_reg_lmnt_awikner.csc_mult", "qualname": "matrix_diag_sparse_mult_add_sparse", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">diag_mat</span>,</span><span class=\"param\">\t<span class=\"n\">data</span>,</span><span class=\"param\">\t<span class=\"n\">indices</span>,</span><span class=\"param\">\t<span class=\"n\">indptr</span>,</span><span class=\"param\">\t<span class=\"n\">shape</span>,</span><span class=\"param\">\t<span class=\"n\">add_mat_data</span>,</span><span class=\"param\">\t<span class=\"n\">add_mat_indices</span>,</span><span class=\"param\">\t<span class=\"n\">add_mat_indptr</span>,</span><span class=\"param\">\t<span class=\"n\">add_mat_shape</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.csc_mult.matrix_diag_sparse_diag_mult", "modulename": "res_reg_lmnt_awikner.csc_mult", "qualname": "matrix_diag_sparse_diag_mult", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dmat</span>, </span><span class=\"param\"><span class=\"n\">b_data</span>, </span><span class=\"param\"><span class=\"n\">b_indices</span>, </span><span class=\"param\"><span class=\"n\">b_indptr</span>, </span><span class=\"param\"><span class=\"n\">b_shape</span>, </span><span class=\"param\"><span class=\"n\">dmat_inv</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.csc_mult.matrix_diag_sparse_mult", "modulename": "res_reg_lmnt_awikner.csc_mult", "qualname": "matrix_diag_sparse_mult", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dmat</span>, </span><span class=\"param\"><span class=\"n\">b_data</span>, </span><span class=\"param\"><span class=\"n\">b_indices</span>, </span><span class=\"param\"><span class=\"n\">b_indptr</span>, </span><span class=\"param\"><span class=\"n\">b_shape</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.csc_mult.dense_to_sparse", "modulename": "res_reg_lmnt_awikner.csc_mult", "qualname": "dense_to_sparse", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">W</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.csc_mult.mult_vec", "modulename": "res_reg_lmnt_awikner.csc_mult", "qualname": "mult_vec", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">indices</span>, </span><span class=\"param\"><span class=\"n\">indptr</span>, </span><span class=\"param\"><span class=\"n\">shape</span>, </span><span class=\"param\"><span class=\"n\">mat</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.csc_mult.construct_jac_mat_csc", "modulename": "res_reg_lmnt_awikner.csc_mult", "qualname": "construct_jac_mat_csc", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">Win</span>,</span><span class=\"param\">\t<span class=\"n\">data_in</span>,</span><span class=\"param\">\t<span class=\"n\">indices_in</span>,</span><span class=\"param\">\t<span class=\"n\">indptr_in</span>,</span><span class=\"param\">\t<span class=\"n\">shape_in</span>,</span><span class=\"param\">\t<span class=\"n\">rsvr_size</span>,</span><span class=\"param\">\t<span class=\"n\">n</span>,</span><span class=\"param\">\t<span class=\"n\">squarenodes</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.csc_mult.construct_jac_mat_csc_csc", "modulename": "res_reg_lmnt_awikner.csc_mult", "qualname": "construct_jac_mat_csc_csc", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">Win_data</span>,</span><span class=\"param\">\t<span class=\"n\">Win_indices</span>,</span><span class=\"param\">\t<span class=\"n\">Win_indptr</span>,</span><span class=\"param\">\t<span class=\"n\">Win_shape</span>,</span><span class=\"param\">\t<span class=\"n\">data_in</span>,</span><span class=\"param\">\t<span class=\"n\">indices_in</span>,</span><span class=\"param\">\t<span class=\"n\">indptr_in</span>,</span><span class=\"param\">\t<span class=\"n\">shape_in</span>,</span><span class=\"param\">\t<span class=\"n\">rsvr_size</span>,</span><span class=\"param\">\t<span class=\"n\">n</span>,</span><span class=\"param\">\t<span class=\"n\">squarenodes</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.csc_mult.construct_leakage_mat", "modulename": "res_reg_lmnt_awikner.csc_mult", "qualname": "construct_leakage_mat", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">rsvr_size</span>, </span><span class=\"param\"><span class=\"n\">n</span>, </span><span class=\"param\"><span class=\"n\">leakage</span>, </span><span class=\"param\"><span class=\"n\">squarenodes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.csc_mult.construct_leakage_mat_mlonly", "modulename": "res_reg_lmnt_awikner.csc_mult", "qualname": "construct_leakage_mat_mlonly", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">rsvr_size</span>, </span><span class=\"param\"><span class=\"n\">n</span>, </span><span class=\"param\"><span class=\"n\">leakage</span>, </span><span class=\"param\"><span class=\"n\">squarenodes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.csc_mult.get_Win_nobias", "modulename": "res_reg_lmnt_awikner.csc_mult", "qualname": "get_Win_nobias", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data_in</span>, </span><span class=\"param\"><span class=\"n\">indices_in</span>, </span><span class=\"param\"><span class=\"n\">indptr_in</span>, </span><span class=\"param\"><span class=\"n\">shape_in</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.csc_mult.coo_to_csc", "modulename": "res_reg_lmnt_awikner.csc_mult", "qualname": "coo_to_csc", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data_in</span>, </span><span class=\"param\"><span class=\"n\">row_in</span>, </span><span class=\"param\"><span class=\"n\">col_in</span>, </span><span class=\"param\"><span class=\"n\">shape_in</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.csc_mult.csc_to_coo", "modulename": "res_reg_lmnt_awikner.csc_mult", "qualname": "csc_to_coo", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data_in</span>, </span><span class=\"param\"><span class=\"n\">indices_in</span>, </span><span class=\"param\"><span class=\"n\">indptr_in</span>, </span><span class=\"param\"><span class=\"n\">shape_in</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.csc_mult.matrix_diag_sparse_mult_sparse_add", "modulename": "res_reg_lmnt_awikner.csc_mult", "qualname": "matrix_diag_sparse_mult_sparse_add", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">diag_mat</span>,</span><span class=\"param\">\t<span class=\"n\">data</span>,</span><span class=\"param\">\t<span class=\"n\">indices</span>,</span><span class=\"param\">\t<span class=\"n\">indptr</span>,</span><span class=\"param\">\t<span class=\"n\">shape</span>,</span><span class=\"param\">\t<span class=\"n\">add_mat_data</span>,</span><span class=\"param\">\t<span class=\"n\">add_mat_indices</span>,</span><span class=\"param\">\t<span class=\"n\">add_mat_indptr</span>,</span><span class=\"param\">\t<span class=\"n\">add_mat_shape</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.csc_mult.matrix_sparse_sparseT_mult", "modulename": "res_reg_lmnt_awikner.csc_mult", "qualname": "matrix_sparse_sparseT_mult", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mat1_data</span>, </span><span class=\"param\"><span class=\"n\">mat1_indices</span>, </span><span class=\"param\"><span class=\"n\">mat1_indptr</span>, </span><span class=\"param\"><span class=\"n\">mat1_shape</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.csc_mult.matrix_sparse_sparse_mult", "modulename": "res_reg_lmnt_awikner.csc_mult", "qualname": "matrix_sparse_sparse_mult", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mat1_data</span>,</span><span class=\"param\">\t<span class=\"n\">mat1_indices</span>,</span><span class=\"param\">\t<span class=\"n\">mat1_indptr</span>,</span><span class=\"param\">\t<span class=\"n\">mat1_shape</span>,</span><span class=\"param\">\t<span class=\"n\">mat2_data</span>,</span><span class=\"param\">\t<span class=\"n\">mat2_indices</span>,</span><span class=\"param\">\t<span class=\"n\">mat2_indptr</span>,</span><span class=\"param\">\t<span class=\"n\">mat2_shape</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.csc_mult.matrix_sparse_sparse_conv_mult", "modulename": "res_reg_lmnt_awikner.csc_mult", "qualname": "matrix_sparse_sparse_conv_mult", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mat1_data</span>,</span><span class=\"param\">\t<span class=\"n\">mat1_indices</span>,</span><span class=\"param\">\t<span class=\"n\">mat1_indptr</span>,</span><span class=\"param\">\t<span class=\"n\">mat1_shape</span>,</span><span class=\"param\">\t<span class=\"n\">mat2_data</span>,</span><span class=\"param\">\t<span class=\"n\">mat2_indices</span>,</span><span class=\"param\">\t<span class=\"n\">mat2_indptr</span>,</span><span class=\"param\">\t<span class=\"n\">mat2_shape</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.csc_mult.matrix_sparse_sparseT_conv_mult", "modulename": "res_reg_lmnt_awikner.csc_mult", "qualname": "matrix_sparse_sparseT_conv_mult", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mat1_data</span>, </span><span class=\"param\"><span class=\"n\">mat1_indices</span>, </span><span class=\"param\"><span class=\"n\">mat1_indptr</span>, </span><span class=\"param\"><span class=\"n\">mat1_shape</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.csc_mult.get_D_n", "modulename": "res_reg_lmnt_awikner.csc_mult", "qualname": "get_D_n", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">D</span>,</span><span class=\"param\">\t<span class=\"n\">X</span>,</span><span class=\"param\">\t<span class=\"n\">Win_nobias_data</span>,</span><span class=\"param\">\t<span class=\"n\">Win_nobias_indices</span>,</span><span class=\"param\">\t<span class=\"n\">Win_nobias_indptr</span>,</span><span class=\"param\">\t<span class=\"n\">Win_nobias_shape</span>,</span><span class=\"param\">\t<span class=\"n\">D_n_shape</span>,</span><span class=\"param\">\t<span class=\"n\">rsvr_size</span>,</span><span class=\"param\">\t<span class=\"n\">res_feature_size</span>,</span><span class=\"param\">\t<span class=\"n\">n</span>,</span><span class=\"param\">\t<span class=\"n\">squarenodes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.csc_mult.get_D_n_mlonly", "modulename": "res_reg_lmnt_awikner.csc_mult", "qualname": "get_D_n_mlonly", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">D</span>,</span><span class=\"param\">\t<span class=\"n\">Win_nobias_data</span>,</span><span class=\"param\">\t<span class=\"n\">Win_nobias_indices</span>,</span><span class=\"param\">\t<span class=\"n\">Win_nobias_indptr</span>,</span><span class=\"param\">\t<span class=\"n\">Win_nobias_shape</span>,</span><span class=\"param\">\t<span class=\"n\">D_n_shape</span>,</span><span class=\"param\">\t<span class=\"n\">rsvr_size</span>,</span><span class=\"param\">\t<span class=\"n\">res_feature_size</span>,</span><span class=\"param\">\t<span class=\"n\">n</span>,</span><span class=\"param\">\t<span class=\"n\">squarenodes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.csc_mult.get_E_n", "modulename": "res_reg_lmnt_awikner.csc_mult", "qualname": "get_E_n", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">D</span>,</span><span class=\"param\">\t<span class=\"n\">X</span>,</span><span class=\"param\">\t<span class=\"n\">E_n_shape</span>,</span><span class=\"param\">\t<span class=\"n\">rsvr_size</span>,</span><span class=\"param\">\t<span class=\"n\">W_mat_data</span>,</span><span class=\"param\">\t<span class=\"n\">W_mat_indices</span>,</span><span class=\"param\">\t<span class=\"n\">W_mat_indptr</span>,</span><span class=\"param\">\t<span class=\"n\">W_mat_shape</span>,</span><span class=\"param\">\t<span class=\"n\">leakage_mat_data</span>,</span><span class=\"param\">\t<span class=\"n\">leakage_mat_indices</span>,</span><span class=\"param\">\t<span class=\"n\">leakage_mat_indptr</span>,</span><span class=\"param\">\t<span class=\"n\">leakage_mat_shape</span>,</span><span class=\"param\">\t<span class=\"n\">squarenodes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.csc_mult.get_E_n_mlonly", "modulename": "res_reg_lmnt_awikner.csc_mult", "qualname": "get_E_n_mlonly", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">D</span>,</span><span class=\"param\">\t<span class=\"n\">E_n_shape</span>,</span><span class=\"param\">\t<span class=\"n\">rsvr_size</span>,</span><span class=\"param\">\t<span class=\"n\">W_mat_data</span>,</span><span class=\"param\">\t<span class=\"n\">W_mat_indices</span>,</span><span class=\"param\">\t<span class=\"n\">W_mat_indptr</span>,</span><span class=\"param\">\t<span class=\"n\">W_mat_shape</span>,</span><span class=\"param\">\t<span class=\"n\">leakage_mat_data</span>,</span><span class=\"param\">\t<span class=\"n\">leakage_mat_indices</span>,</span><span class=\"param\">\t<span class=\"n\">leakage_mat_indptr</span>,</span><span class=\"param\">\t<span class=\"n\">leakage_mat_shape</span>,</span><span class=\"param\">\t<span class=\"n\">squarenodes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.helpers", "modulename": "res_reg_lmnt_awikner.helpers", "type": "module", "doc": "<p></p>\n"}, {"fullname": "res_reg_lmnt_awikner.helpers.get_windows_path", "modulename": "res_reg_lmnt_awikner.helpers", "qualname": "get_windows_path", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path_base</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.helpers.poincare_max", "modulename": "res_reg_lmnt_awikner.helpers", "qualname": "poincare_max", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">traj</span>, </span><span class=\"param\"><span class=\"n\">idxs</span><span class=\"o\">=</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">int32</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.helpers.poincare_max_peaks", "modulename": "res_reg_lmnt_awikner.helpers", "qualname": "poincare_max_peaks", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">traj</span>, </span><span class=\"param\"><span class=\"n\">idxs</span><span class=\"o\">=</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">int32</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.helpers.set_numba", "modulename": "res_reg_lmnt_awikner.helpers", "qualname": "set_numba", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">root_folder</span>, </span><span class=\"param\"><span class=\"n\">disable_jit</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.helpers.get_filename", "modulename": "res_reg_lmnt_awikner.helpers", "qualname": "get_filename", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">run_folder_name</span>,</span><span class=\"param\">\t<span class=\"n\">var_str</span>,</span><span class=\"param\">\t<span class=\"n\">res_itr</span>,</span><span class=\"param\">\t<span class=\"n\">train_seed</span>,</span><span class=\"param\">\t<span class=\"n\">noise_val</span>,</span><span class=\"param\">\t<span class=\"n\">reg_train_time</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.ks_etdrk4", "modulename": "res_reg_lmnt_awikner.ks_etdrk4", "type": "module", "doc": "<p></p>\n"}, {"fullname": "res_reg_lmnt_awikner.ks_etdrk4.mean_numba_axis1", "modulename": "res_reg_lmnt_awikner.ks_etdrk4", "qualname": "mean_numba_axis1", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mat</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.ks_etdrk4.precompute_KS_params", "modulename": "res_reg_lmnt_awikner.ks_etdrk4", "qualname": "precompute_KS_params", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">N</span>, </span><span class=\"param\"><span class=\"n\">d</span>, </span><span class=\"param\"><span class=\"n\">tau</span>, </span><span class=\"param\"><span class=\"n\">M</span><span class=\"o\">=</span><span class=\"mi\">16</span>, </span><span class=\"param\"><span class=\"n\">const</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.ks_etdrk4.kursiv_forecast", "modulename": "res_reg_lmnt_awikner.ks_etdrk4", "qualname": "kursiv_forecast", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">u</span>, </span><span class=\"param\"><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.ks_etdrk4.kursiv_forecast_pred", "modulename": "res_reg_lmnt_awikner.ks_etdrk4", "qualname": "kursiv_forecast_pred", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">u</span>, </span><span class=\"param\"><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.ks_etdrk4.kursiv_predict", "modulename": "res_reg_lmnt_awikner.ks_etdrk4", "qualname": "kursiv_predict", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">u0</span>,</span><span class=\"param\">\t<span class=\"n\">tau</span><span class=\"o\">=</span><span class=\"mf\">0.25</span>,</span><span class=\"param\">\t<span class=\"n\">N</span><span class=\"o\">=</span><span class=\"mi\">64</span>,</span><span class=\"param\">\t<span class=\"n\">d</span><span class=\"o\">=</span><span class=\"mi\">22</span>,</span><span class=\"param\">\t<span class=\"n\">T</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"o\">=</span><span class=\"n\">array</span><span class=\"p\">([],</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">complex128</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">int_steps</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.ks_etdrk4.kursiv_predict_pred", "modulename": "res_reg_lmnt_awikner.ks_etdrk4", "qualname": "kursiv_predict_pred", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">u0_array</span>,</span><span class=\"param\">\t<span class=\"n\">tau</span><span class=\"o\">=</span><span class=\"mf\">0.25</span>,</span><span class=\"param\">\t<span class=\"n\">N</span><span class=\"o\">=</span><span class=\"mi\">64</span>,</span><span class=\"param\">\t<span class=\"n\">d</span><span class=\"o\">=</span><span class=\"mi\">22</span>,</span><span class=\"param\">\t<span class=\"n\">T</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"o\">=</span><span class=\"n\">array</span><span class=\"p\">([],</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">complex128</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.lorenzrungekutta_numba", "modulename": "res_reg_lmnt_awikner.lorenzrungekutta_numba", "type": "module", "doc": "<p></p>\n"}, {"fullname": "res_reg_lmnt_awikner.lorenzrungekutta_numba.dxdt_lorenz", "modulename": "res_reg_lmnt_awikner.lorenzrungekutta_numba", "qualname": "dxdt_lorenz", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mf\">10.0</span>, </span><span class=\"param\"><span class=\"n\">beta</span><span class=\"o\">=</span><span class=\"mf\">2.6666666666666665</span>, </span><span class=\"param\"><span class=\"n\">rho</span><span class=\"o\">=</span><span class=\"mf\">28.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.lorenzrungekutta_numba.dxdt_lorenz_array", "modulename": "res_reg_lmnt_awikner.lorenzrungekutta_numba", "qualname": "dxdt_lorenz_array", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mf\">10.0</span>, </span><span class=\"param\"><span class=\"n\">beta</span><span class=\"o\">=</span><span class=\"mf\">2.6666666666666665</span>, </span><span class=\"param\"><span class=\"n\">rho</span><span class=\"o\">=</span><span class=\"mf\">28.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.lorenzrungekutta_numba.rk4", "modulename": "res_reg_lmnt_awikner.lorenzrungekutta_numba", "qualname": "rk4", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">tau</span>, </span><span class=\"param\"><span class=\"n\">dxdt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.lorenzrungekutta_numba.lorenzrungekutta", "modulename": "res_reg_lmnt_awikner.lorenzrungekutta_numba", "qualname": "lorenzrungekutta", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">u0</span><span class=\"o\">=</span><span class=\"n\">array</span><span class=\"p\">([</span> <span class=\"mi\">1</span><span class=\"p\">,</span>  <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">])</span>, </span><span class=\"param\"><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"mi\">100</span>, </span><span class=\"param\"><span class=\"n\">tau</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>, </span><span class=\"param\"><span class=\"n\">int_step</span><span class=\"o\">=</span><span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.lorenzrungekutta_numba.lorenzrungekutta_pred", "modulename": "res_reg_lmnt_awikner.lorenzrungekutta_numba", "qualname": "lorenzrungekutta_pred", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">u0_array</span>, </span><span class=\"param\"><span class=\"n\">tau</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>, </span><span class=\"param\"><span class=\"n\">int_step</span><span class=\"o\">=</span><span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.process_test_data", "modulename": "res_reg_lmnt_awikner.process_test_data", "type": "module", "doc": "<p></p>\n"}, {"fullname": "res_reg_lmnt_awikner.process_test_data.process_data", "modulename": "res_reg_lmnt_awikner.process_test_data", "qualname": "process_data", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">argv</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">run_opts</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.process_test_data.main", "modulename": "res_reg_lmnt_awikner.process_test_data", "qualname": "main", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">argv</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.reservoir_train_test", "modulename": "res_reg_lmnt_awikner.reservoir_train_test", "type": "module", "doc": "<p></p>\n"}, {"fullname": "res_reg_lmnt_awikner.reservoir_train_test.str_to_int", "modulename": "res_reg_lmnt_awikner.reservoir_train_test", "qualname": "str_to_int", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.reservoir_train_test.mean_numba_axis1", "modulename": "res_reg_lmnt_awikner.reservoir_train_test", "qualname": "mean_numba_axis1", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mat</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.reservoir_train_test.sum_numba_axis0", "modulename": "res_reg_lmnt_awikner.reservoir_train_test", "qualname": "sum_numba_axis0", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mat</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.reservoir_train_test.numba_var_axis0", "modulename": "res_reg_lmnt_awikner.reservoir_train_test", "qualname": "numba_var_axis0", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pred</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.reservoir_train_test.wasserstein_distance_empirical", "modulename": "res_reg_lmnt_awikner.reservoir_train_test", "qualname": "wasserstein_distance_empirical", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">measured_samples</span>, </span><span class=\"param\"><span class=\"n\">true_samples</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.reservoir_train_test.numba_eigsh", "modulename": "res_reg_lmnt_awikner.reservoir_train_test", "qualname": "numba_eigsh", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">A</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.reservoir_train_test.numerical_model_wrapped", "modulename": "res_reg_lmnt_awikner.reservoir_train_test", "qualname": "numerical_model_wrapped", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">h</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">tau</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">T</span><span class=\"o\">=</span><span class=\"mi\">300</span>,</span><span class=\"param\">\t<span class=\"n\">ttsplit</span><span class=\"o\">=</span><span class=\"mi\">5000</span>,</span><span class=\"param\">\t<span class=\"n\">u0</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">system</span><span class=\"o\">=</span><span class=\"s1\">&#39;lorenz&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"o\">=</span><span class=\"n\">array</span><span class=\"p\">([],</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">complex128</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.reservoir_train_test.numerical_model_wrapped_pred", "modulename": "res_reg_lmnt_awikner.reservoir_train_test", "qualname": "numerical_model_wrapped_pred", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">h</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">tau</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">T</span><span class=\"o\">=</span><span class=\"mi\">300</span>,</span><span class=\"param\">\t<span class=\"n\">ttsplit</span><span class=\"o\">=</span><span class=\"mi\">5000</span>,</span><span class=\"param\">\t<span class=\"n\">u0_array</span><span class=\"o\">=</span><span class=\"n\">array</span><span class=\"p\">([],</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">complex128</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">system</span><span class=\"o\">=</span><span class=\"s1\">&#39;lorenz&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"o\">=</span><span class=\"n\">array</span><span class=\"p\">([],</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">complex128</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.reservoir_train_test.getX", "modulename": "res_reg_lmnt_awikner.reservoir_train_test", "qualname": "getX", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">res</span>, </span><span class=\"param\"><span class=\"n\">rk</span>, </span><span class=\"param\"><span class=\"n\">x0</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">y0</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">z0</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.reservoir_train_test.get_X_wrapped", "modulename": "res_reg_lmnt_awikner.reservoir_train_test", "qualname": "get_X_wrapped", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">u_training</span>,</span><span class=\"param\">\t<span class=\"n\">res_X</span>,</span><span class=\"param\">\t<span class=\"n\">Win_data</span>,</span><span class=\"param\">\t<span class=\"n\">Win_indices</span>,</span><span class=\"param\">\t<span class=\"n\">Win_indptr</span>,</span><span class=\"param\">\t<span class=\"n\">Win_shape</span>,</span><span class=\"param\">\t<span class=\"n\">W_data</span>,</span><span class=\"param\">\t<span class=\"n\">W_indices</span>,</span><span class=\"param\">\t<span class=\"n\">W_indptr</span>,</span><span class=\"param\">\t<span class=\"n\">W_shape</span>,</span><span class=\"param\">\t<span class=\"n\">leakage</span>,</span><span class=\"param\">\t<span class=\"n\">noise</span>,</span><span class=\"param\">\t<span class=\"n\">noisetype</span><span class=\"o\">=</span><span class=\"s1\">&#39;none&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">noise_scaling</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">noise_realization</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">traintype</span><span class=\"o\">=</span><span class=\"s1\">&#39;normal&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.reservoir_train_test.gen_noise_driver", "modulename": "res_reg_lmnt_awikner.reservoir_train_test", "qualname": "gen_noise_driver", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">run_opts</span>, </span><span class=\"param\"><span class=\"n\">data_shape</span>, </span><span class=\"param\"><span class=\"n\">res_shape</span>, </span><span class=\"param\"><span class=\"n\">noise_scaling</span>, </span><span class=\"param\"><span class=\"n\">noise_stream</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.reservoir_train_test.gen_noise", "modulename": "res_reg_lmnt_awikner.reservoir_train_test", "qualname": "gen_noise", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">noise_size</span>,</span><span class=\"param\">\t<span class=\"n\">noise_length</span>,</span><span class=\"param\">\t<span class=\"n\">noisetype</span>,</span><span class=\"param\">\t<span class=\"n\">noise_scaling</span>,</span><span class=\"param\">\t<span class=\"n\">noise_stream</span>,</span><span class=\"param\">\t<span class=\"n\">noise_realizations</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.reservoir_train_test.get_states", "modulename": "res_reg_lmnt_awikner.reservoir_train_test", "qualname": "get_states", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">run_opts</span>, </span><span class=\"param\"><span class=\"n\">res</span>, </span><span class=\"param\"><span class=\"n\">rk</span>, </span><span class=\"param\"><span class=\"n\">noise</span>, </span><span class=\"param\"><span class=\"n\">noise_scaling</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.reservoir_train_test.get_squared", "modulename": "res_reg_lmnt_awikner.reservoir_train_test", "qualname": "get_squared", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">rsvr_size</span>, </span><span class=\"param\"><span class=\"n\">squarenodes</span>, </span><span class=\"param\"><span class=\"n\">dim</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.reservoir_train_test.get_squared_vec", "modulename": "res_reg_lmnt_awikner.reservoir_train_test", "qualname": "get_squared_vec", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">rsvr_size</span>, </span><span class=\"param\"><span class=\"n\">squarenodes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.reservoir_train_test.get_states_wrapped", "modulename": "res_reg_lmnt_awikner.reservoir_train_test", "qualname": "get_states_wrapped", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">u_arr_train</span>,</span><span class=\"param\">\t<span class=\"n\">reg_train_times</span>,</span><span class=\"param\">\t<span class=\"n\">res_X</span>,</span><span class=\"param\">\t<span class=\"n\">Win_data</span>,</span><span class=\"param\">\t<span class=\"n\">Win_indices</span>,</span><span class=\"param\">\t<span class=\"n\">Win_indptr</span>,</span><span class=\"param\">\t<span class=\"n\">Win_shape</span>,</span><span class=\"param\">\t<span class=\"n\">W_data</span>,</span><span class=\"param\">\t<span class=\"n\">W_indices</span>,</span><span class=\"param\">\t<span class=\"n\">W_indptr</span>,</span><span class=\"param\">\t<span class=\"n\">W_shape</span>,</span><span class=\"param\">\t<span class=\"n\">leakage</span>,</span><span class=\"param\">\t<span class=\"n\">skip</span>,</span><span class=\"param\">\t<span class=\"n\">noise</span>,</span><span class=\"param\">\t<span class=\"n\">noisetype</span><span class=\"o\">=</span><span class=\"s1\">&#39;none&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">noise_scaling</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">noise_realizations</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">traintype</span><span class=\"o\">=</span><span class=\"s1\">&#39;normal&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">squarenodes</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">q</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.reservoir_train_test.getD", "modulename": "res_reg_lmnt_awikner.reservoir_train_test", "qualname": "getD", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">u_arr_train</span>,</span><span class=\"param\">\t<span class=\"n\">res_X</span>,</span><span class=\"param\">\t<span class=\"n\">Win_data</span>,</span><span class=\"param\">\t<span class=\"n\">Win_indices</span>,</span><span class=\"param\">\t<span class=\"n\">Win_indptr</span>,</span><span class=\"param\">\t<span class=\"n\">Win_shape</span>,</span><span class=\"param\">\t<span class=\"n\">W_data</span>,</span><span class=\"param\">\t<span class=\"n\">W_indices</span>,</span><span class=\"param\">\t<span class=\"n\">W_indptr</span>,</span><span class=\"param\">\t<span class=\"n\">W_shape</span>,</span><span class=\"param\">\t<span class=\"n\">leakage</span>,</span><span class=\"param\">\t<span class=\"n\">noise</span>,</span><span class=\"param\">\t<span class=\"n\">skip</span>,</span><span class=\"param\">\t<span class=\"n\">noisetype</span><span class=\"o\">=</span><span class=\"s1\">&#39;none&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">noise_scaling</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">noise_realizations</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">traintype</span><span class=\"o\">=</span><span class=\"s1\">&#39;normal&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">squarenodes</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.reservoir_train_test.predict", "modulename": "res_reg_lmnt_awikner.reservoir_train_test", "qualname": "predict", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">res</span>, </span><span class=\"param\"><span class=\"n\">u0</span>, </span><span class=\"param\"><span class=\"n\">steps</span><span class=\"o\">=</span><span class=\"mi\">1000</span>, </span><span class=\"param\"><span class=\"n\">squarenodes</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.reservoir_train_test.predictwrapped", "modulename": "res_reg_lmnt_awikner.reservoir_train_test", "qualname": "predictwrapped", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">res_X</span>,</span><span class=\"param\">\t<span class=\"n\">Win_data</span>,</span><span class=\"param\">\t<span class=\"n\">Win_indices</span>,</span><span class=\"param\">\t<span class=\"n\">Win_indptr</span>,</span><span class=\"param\">\t<span class=\"n\">Win_shape</span>,</span><span class=\"param\">\t<span class=\"n\">W_data</span>,</span><span class=\"param\">\t<span class=\"n\">W_indices</span>,</span><span class=\"param\">\t<span class=\"n\">W_indptr</span>,</span><span class=\"param\">\t<span class=\"n\">W_shape</span>,</span><span class=\"param\">\t<span class=\"n\">Wout</span>,</span><span class=\"param\">\t<span class=\"n\">leakage</span>,</span><span class=\"param\">\t<span class=\"n\">u0</span>,</span><span class=\"param\">\t<span class=\"n\">steps</span>,</span><span class=\"param\">\t<span class=\"n\">squarenodes</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.reservoir_train_test.get_test_data", "modulename": "res_reg_lmnt_awikner.reservoir_train_test", "qualname": "get_test_data", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">run_opts</span>, </span><span class=\"param\"><span class=\"n\">test_stream</span>, </span><span class=\"param\"><span class=\"n\">overall_idx</span>, </span><span class=\"param\"><span class=\"n\">rkTime</span>, </span><span class=\"param\"><span class=\"n\">split</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.reservoir_train_test.test", "modulename": "res_reg_lmnt_awikner.reservoir_train_test", "qualname": "test", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">run_opts</span>,</span><span class=\"param\">\t<span class=\"n\">res</span>,</span><span class=\"param\">\t<span class=\"n\">Wout_itr</span>,</span><span class=\"param\">\t<span class=\"n\">noise_in</span>,</span><span class=\"param\">\t<span class=\"n\">rktest_u_arr_train_nonoise</span>,</span><span class=\"param\">\t<span class=\"n\">rktest_u_arr_test</span>,</span><span class=\"param\">\t<span class=\"n\">true_pmap_max</span>,</span><span class=\"param\">\t<span class=\"n\">rkTime</span><span class=\"o\">=</span><span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">split</span><span class=\"o\">=</span><span class=\"mi\">3000</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"o\">=</span><span class=\"n\">array</span><span class=\"p\">([],</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">complex128</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">showMapError</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">showTrajectories</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">showHist</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.reservoir_train_test.test_wrapped", "modulename": "res_reg_lmnt_awikner.reservoir_train_test", "qualname": "test_wrapped", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">res_X</span>,</span><span class=\"param\">\t<span class=\"n\">Win_data</span>,</span><span class=\"param\">\t<span class=\"n\">Win_indices</span>,</span><span class=\"param\">\t<span class=\"n\">Win_indptr</span>,</span><span class=\"param\">\t<span class=\"n\">Win_shape</span>,</span><span class=\"param\">\t<span class=\"n\">W_data</span>,</span><span class=\"param\">\t<span class=\"n\">W_indices</span>,</span><span class=\"param\">\t<span class=\"n\">W_indptr</span>,</span><span class=\"param\">\t<span class=\"n\">W_shape</span>,</span><span class=\"param\">\t<span class=\"n\">Wout</span>,</span><span class=\"param\">\t<span class=\"n\">leakage</span>,</span><span class=\"param\">\t<span class=\"n\">rktest_u_arr_train_nonoise</span>,</span><span class=\"param\">\t<span class=\"n\">rktest_u_arr_test</span>,</span><span class=\"param\">\t<span class=\"n\">true_pmap_max</span>,</span><span class=\"param\">\t<span class=\"n\">num_tests</span>,</span><span class=\"param\">\t<span class=\"n\">rkTime</span>,</span><span class=\"param\">\t<span class=\"n\">split</span>,</span><span class=\"param\">\t<span class=\"n\">noise_in</span>,</span><span class=\"param\">\t<span class=\"n\">system</span><span class=\"o\">=</span><span class=\"s1\">&#39;lorenz&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">tau</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"o\">=</span><span class=\"n\">array</span><span class=\"p\">([],</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">complex128</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">pmap</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">max_valid_time</span><span class=\"o\">=</span><span class=\"mi\">500</span>,</span><span class=\"param\">\t<span class=\"n\">squarenodes</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">savepred</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">save_time_rms</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.reservoir_train_test.generate_res", "modulename": "res_reg_lmnt_awikner.reservoir_train_test", "qualname": "generate_res", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">run_opts</span>, </span><span class=\"param\"><span class=\"n\">res_gen</span>, </span><span class=\"param\"><span class=\"n\">res_itr</span>, </span><span class=\"param\"><span class=\"n\">rk</span>, </span><span class=\"param\"><span class=\"n\">noise_stream</span>, </span><span class=\"param\"><span class=\"n\">noise_scaling</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.reservoir_train_test.optim_func", "modulename": "res_reg_lmnt_awikner.reservoir_train_test", "qualname": "optim_func", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">run_opts</span>,</span><span class=\"param\">\t<span class=\"n\">res_out</span>,</span><span class=\"param\">\t<span class=\"n\">res</span>,</span><span class=\"param\">\t<span class=\"n\">noise_in</span>,</span><span class=\"param\">\t<span class=\"n\">noise</span>,</span><span class=\"param\">\t<span class=\"n\">noise_idx</span>,</span><span class=\"param\">\t<span class=\"n\">rktest_u_arr_train_nonoise</span>,</span><span class=\"param\">\t<span class=\"n\">rktest_u_arr_test</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span>,</span><span class=\"param\">\t<span class=\"n\">alpha_idx</span>,</span><span class=\"param\">\t<span class=\"n\">true_pmap_max</span>,</span><span class=\"param\">\t<span class=\"n\">rkTime</span><span class=\"o\">=</span><span class=\"mi\">400</span>,</span><span class=\"param\">\t<span class=\"n\">split</span><span class=\"o\">=</span><span class=\"mi\">2000</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"o\">=</span><span class=\"n\">array</span><span class=\"p\">([],</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">complex128</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.reservoir_train_test.get_res_results", "modulename": "res_reg_lmnt_awikner.reservoir_train_test", "qualname": "get_res_results", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">run_opts</span>,</span><span class=\"param\">\t<span class=\"n\">res_itr</span>,</span><span class=\"param\">\t<span class=\"n\">res_gen</span>,</span><span class=\"param\">\t<span class=\"n\">rk</span>,</span><span class=\"param\">\t<span class=\"n\">noise</span>,</span><span class=\"param\">\t<span class=\"n\">noise_stream</span>,</span><span class=\"param\">\t<span class=\"n\">rktest_u_arr_train_nonoise</span>,</span><span class=\"param\">\t<span class=\"n\">rktest_u_arr_test</span>,</span><span class=\"param\">\t<span class=\"n\">rkTime_test</span>,</span><span class=\"param\">\t<span class=\"n\">split_test</span>,</span><span class=\"param\">\t<span class=\"n\">params</span>,</span><span class=\"param\">\t<span class=\"n\">train_seed</span>,</span><span class=\"param\">\t<span class=\"n\">true_pmap_max</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.reservoir_train_test.find_stability", "modulename": "res_reg_lmnt_awikner.reservoir_train_test", "qualname": "find_stability", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">run_opts</span>,</span><span class=\"param\">\t<span class=\"n\">noise</span>,</span><span class=\"param\">\t<span class=\"n\">train_seed</span>,</span><span class=\"param\">\t<span class=\"n\">train_gen</span>,</span><span class=\"param\">\t<span class=\"n\">res_itr</span>,</span><span class=\"param\">\t<span class=\"n\">res_gen</span>,</span><span class=\"param\">\t<span class=\"n\">test_stream</span>,</span><span class=\"param\">\t<span class=\"n\">test_idxs</span>,</span><span class=\"param\">\t<span class=\"n\">noise_stream</span>,</span><span class=\"param\">\t<span class=\"n\">overall_idx</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.reservoir_train_test.find_stability_serial", "modulename": "res_reg_lmnt_awikner.reservoir_train_test", "qualname": "find_stability_serial", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.reservoir_train_test.start_reservoir_test", "modulename": "res_reg_lmnt_awikner.reservoir_train_test", "qualname": "start_reservoir_test", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">argv</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">run_opts</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.reservoir_train_test.main", "modulename": "res_reg_lmnt_awikner.reservoir_train_test", "qualname": "main", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">argv</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "res_reg_lmnt_awikner.slurm-launch", "modulename": "res_reg_lmnt_awikner.slurm-launch", "type": "module", "doc": "<p></p>\n"}, {"fullname": "res_reg_lmnt_awikner.start_deepthought2_run", "modulename": "res_reg_lmnt_awikner.start_deepthought2_run", "type": "module", "doc": "<p></p>\n"}, {"fullname": "res_reg_lmnt_awikner.start_deepthought2_run.start_deepthought2_run", "modulename": "res_reg_lmnt_awikner.start_deepthought2_run", "qualname": "start_deepthought2_run", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">system</span><span class=\"o\">=</span><span class=\"s1\">&#39;KS&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">traintype</span><span class=\"o\">=</span><span class=\"s1\">&#39;normal&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">noisetype</span><span class=\"o\">=</span><span class=\"s1\">&#39;gaussian&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">noise_realizations</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">res_size</span><span class=\"o\">=</span><span class=\"mi\">500</span>,</span><span class=\"param\">\t<span class=\"n\">trainlen</span><span class=\"o\">=</span><span class=\"mi\">3000</span>,</span><span class=\"param\">\t<span class=\"n\">testlen</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">rho</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">leakage</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">tau</span><span class=\"o\">=</span><span class=\"mf\">0.25</span>,</span><span class=\"param\">\t<span class=\"n\">win_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;full&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;old&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">noise_values_array</span><span class=\"o\">=</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">0.00681292</span><span class=\"p\">,</span> <span class=\"mf\">0.01</span>      <span class=\"p\">,</span> <span class=\"mf\">0.01467799</span><span class=\"p\">,</span> <span class=\"mf\">0.02154435</span><span class=\"p\">,</span> <span class=\"mf\">0.03162278</span><span class=\"p\">,</span>\n       <span class=\"mf\">0.04641589</span><span class=\"p\">])</span>,</span><span class=\"param\">\t<span class=\"n\">alpha_values</span><span class=\"o\">=</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">0.00000000e+00</span><span class=\"p\">,</span> <span class=\"mf\">1.00000000e-07</span><span class=\"p\">,</span> <span class=\"mf\">3.16227766e-07</span><span class=\"p\">,</span> <span class=\"mf\">1.00000000e-06</span><span class=\"p\">,</span>\n       <span class=\"mf\">3.16227766e-06</span><span class=\"p\">,</span> <span class=\"mf\">1.00000000e-05</span><span class=\"p\">,</span> <span class=\"mf\">3.16227766e-05</span><span class=\"p\">,</span> <span class=\"mf\">1.00000000e-04</span><span class=\"p\">,</span>\n       <span class=\"mf\">3.16227766e-04</span><span class=\"p\">,</span> <span class=\"mf\">1.00000000e-03</span><span class=\"p\">])</span>,</span><span class=\"param\">\t<span class=\"n\">num_res</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">num_trains</span><span class=\"o\">=</span><span class=\"mi\">4</span>,</span><span class=\"param\">\t<span class=\"n\">num_tests</span><span class=\"o\">=</span><span class=\"mi\">4</span>,</span><span class=\"param\">\t<span class=\"n\">metric</span><span class=\"o\">=</span><span class=\"s1\">&#39;mss_var&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">machine</span><span class=\"o\">=</span><span class=\"s1\">&#39;deepthought2&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">returnall</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">savepred</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">squarenodes</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">savetime</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">max_valid_time</span><span class=\"o\">=</span><span class=\"mi\">500</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">num_nodes</span><span class=\"o\">=</span><span class=\"mi\">4</span>,</span><span class=\"param\">\t<span class=\"n\">cpus_per_node</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">runtime</span><span class=\"o\">=</span><span class=\"s1\">&#39;2:00:00&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">account</span><span class=\"o\">=</span><span class=\"s1\">&#39;physics-hi&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">debug_part</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">just_process</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">parallel</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">res_start</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">train_start</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">test_start</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">import_res</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">import_train</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">import_test</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">import_noise</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">reg_train_times</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">discard_time</span><span class=\"o\">=</span><span class=\"mi\">500</span>,</span><span class=\"param\">\t<span class=\"n\">prior</span><span class=\"o\">=</span><span class=\"s1\">&#39;zero&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">save_eigenvals</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">pmap</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();